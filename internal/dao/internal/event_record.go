// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventRecordDao is the data access object for table tt_event_record.
type EventRecordDao struct {
	table   string             // table is the underlying table name of the DAO.
	group   string             // group is the database configuration group name of current DAO.
	columns EventRecordColumns // columns contains all the column names of Table for convenient usage.
}

// EventRecordColumns defines and stores column names for table tt_event_record.
type EventRecordColumns struct {
	Id          string //
	Subject     string // 标题
	Version     string // 版本
	Eid         string // event id
	Source      string // 事件源
	Type        string // 事件类型
	Time        string // 触发时间
	ContentType string // 内容类型
	Data        string // 数据参数
	IsRespond   string // 是否有响应函数
	Resp        string // 响应数据(暂时不记录)
	CreatedAt   string //
	UpdatedAt   string //
	DeletedAt   string //
}

// eventRecordColumns holds the columns for table tt_event_record.
var eventRecordColumns = EventRecordColumns{
	Id:          "id",
	Subject:     "subject",
	Version:     "version",
	Eid:         "eid",
	Source:      "source",
	Type:        "type",
	Time:        "time",
	ContentType: "content_type",
	Data:        "data",
	IsRespond:   "is_respond",
	Resp:        "resp",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

// NewEventRecordDao creates and returns a new DAO object for table data access.
func NewEventRecordDao() *EventRecordDao {
	return &EventRecordDao{
		group:   "default",
		table:   "tt_event_record",
		columns: eventRecordColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventRecordDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventRecordDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventRecordDao) Columns() EventRecordColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventRecordDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventRecordDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventRecordDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
