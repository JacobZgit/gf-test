// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// K8SDeploymentDao is the data access object for table tt_k8s_deployment.
type K8SDeploymentDao struct {
	table   string               // table is the underlying table name of the DAO.
	group   string               // group is the database configuration group name of current DAO.
	columns K8SDeploymentColumns // columns contains all the column names of Table for convenient usage.
}

// K8SDeploymentColumns defines and stores column names for table tt_k8s_deployment.
type K8SDeploymentColumns struct {
	Uuid          string // deploy 真实的uid
	Cluster       string // cluster name
	ClusterId     string // tt_k8s_cluster_config id
	Namespace     string // namespace name
	Deployment    string // deploy name
	ApiServer     string // k8s server
	Replicas      string //
	AvailReplicas string //
	Age           string //
	Images        string //
	CreatedAt     string //
	UpdatedAt     string //
	DeletedAt     string //
}

// k8SDeploymentColumns holds the columns for table tt_k8s_deployment.
var k8SDeploymentColumns = K8SDeploymentColumns{
	Uuid:          "uuid",
	Cluster:       "cluster",
	ClusterId:     "cluster_id",
	Namespace:     "namespace",
	Deployment:    "deployment",
	ApiServer:     "api_server",
	Replicas:      "replicas",
	AvailReplicas: "avail_replicas",
	Age:           "age",
	Images:        "images",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

// NewK8SDeploymentDao creates and returns a new DAO object for table data access.
func NewK8SDeploymentDao() *K8SDeploymentDao {
	return &K8SDeploymentDao{
		group:   "default",
		table:   "tt_k8s_deployment",
		columns: k8SDeploymentColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *K8SDeploymentDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *K8SDeploymentDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *K8SDeploymentDao) Columns() K8SDeploymentColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *K8SDeploymentDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *K8SDeploymentDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *K8SDeploymentDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
